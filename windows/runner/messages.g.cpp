// Autogenerated from Pigeon (v18.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "messages.g.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

FlutterError CreateConnectionError(const std::string channel_name) {
    return FlutterError(
        "channel-error",
        "Unable to establish connection on channel: '" + channel_name + "'.",
        EncodableValue(""));
}

// MessageDto

MessageDto::MessageDto(
  const std::string& id,
  const std::string& name,
  const std::string& message,
  const std::string& created_at)
 : id_(id),
    name_(name),
    message_(message),
    created_at_(created_at) {}

const std::string& MessageDto::id() const {
  return id_;
}

void MessageDto::set_id(std::string_view value_arg) {
  id_ = value_arg;
}


const std::string& MessageDto::name() const {
  return name_;
}

void MessageDto::set_name(std::string_view value_arg) {
  name_ = value_arg;
}


const std::string& MessageDto::message() const {
  return message_;
}

void MessageDto::set_message(std::string_view value_arg) {
  message_ = value_arg;
}


const std::string& MessageDto::created_at() const {
  return created_at_;
}

void MessageDto::set_created_at(std::string_view value_arg) {
  created_at_ = value_arg;
}


EncodableList MessageDto::ToEncodableList() const {
  EncodableList list;
  list.reserve(4);
  list.push_back(EncodableValue(id_));
  list.push_back(EncodableValue(name_));
  list.push_back(EncodableValue(message_));
  list.push_back(EncodableValue(created_at_));
  return list;
}

MessageDto MessageDto::FromEncodableList(const EncodableList& list) {
  MessageDto decoded(
    std::get<std::string>(list[0]),
    std::get<std::string>(list[1]),
    std::get<std::string>(list[2]),
    std::get<std::string>(list[3]));
  return decoded;
}


MessagingApiCodecSerializer::MessagingApiCodecSerializer() {}

EncodableValue MessagingApiCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:
      return CustomEncodableValue(MessageDto::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 129:
      return CustomEncodableValue(MessageDto::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void MessagingApiCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(MessageDto)) {
      stream->WriteByte(128);
      WriteValue(EncodableValue(std::any_cast<MessageDto>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(MessageDto)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(std::any_cast<MessageDto>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by MessagingApi.
const flutter::StandardMessageCodec& MessagingApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&MessagingApiCodecSerializer::GetInstance());
}

// Sets up an instance of `MessagingApi` to handle messages through the `binary_messenger`.
void MessagingApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  MessagingApi* api) {
  MessagingApi::SetUp(binary_messenger, api, "");
}

void MessagingApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  MessagingApi* api,
  const std::string& message_channel_suffix) {
  const std::string prepended_suffix = message_channel_suffix.length() > 0 ? std::string(".") + message_channel_suffix : "";
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.messages.MessagingApi.getMessages" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          ErrorOr<EncodableList> output = api->GetMessages();
          if (output.has_error()) {
            reply(WrapError(output.error()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.messages.MessagingApi.sendMessage" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_message_arg = args.at(0);
          if (encodable_message_arg.IsNull()) {
            reply(WrapError("message_arg unexpectedly null."));
            return;
          }
          const auto& message_arg = std::any_cast<const MessageDto&>(std::get<CustomEncodableValue>(encodable_message_arg));
          ErrorOr<MessageDto> output = api->SendMessage(message_arg);
          if (output.has_error()) {
            reply(WrapError(output.error()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
}

EncodableValue MessagingApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue MessagingApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}


FlutterMessagingApiCodecSerializer::FlutterMessagingApiCodecSerializer() {}

EncodableValue FlutterMessagingApiCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:
      return CustomEncodableValue(MessageDto::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 129:
      return CustomEncodableValue(MessageDto::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void FlutterMessagingApiCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(MessageDto)) {
      stream->WriteByte(128);
      WriteValue(EncodableValue(std::any_cast<MessageDto>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(MessageDto)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(std::any_cast<MessageDto>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

// Generated class from Pigeon that represents Flutter messages that can be called from C++.
FlutterMessagingApi::FlutterMessagingApi(flutter::BinaryMessenger* binary_messenger)
 : binary_messenger_(binary_messenger),
    message_channel_suffix_("") {}

FlutterMessagingApi::FlutterMessagingApi(
  flutter::BinaryMessenger* binary_messenger,
  const std::string& message_channel_suffix)
 : binary_messenger_(binary_messenger),
    message_channel_suffix_(message_channel_suffix.length() > 0 ? std::string(".") + message_channel_suffix : "") {}

const flutter::StandardMessageCodec& FlutterMessagingApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&FlutterMessagingApiCodecSerializer::GetInstance());
}

void FlutterMessagingApi::GetMessages(
  std::function<void(const EncodableList&)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.messages.FlutterMessagingApi.getMessages" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue();
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        const auto& return_value = std::get<EncodableList>(list_return_value->at(0));
        on_success(return_value);
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

void FlutterMessagingApi::SendMessage(
  const MessageDto& message_arg,
  std::function<void(const MessageDto&)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.messages.FlutterMessagingApi.sendMessage" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    CustomEncodableValue(message_arg),
  });
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        const auto& return_value = std::any_cast<const MessageDto&>(std::get<CustomEncodableValue>(list_return_value->at(0)));
        on_success(return_value);
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

