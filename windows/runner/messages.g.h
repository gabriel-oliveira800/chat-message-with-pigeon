// Autogenerated from Pigeon (v18.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_MESSAGES_G_H_
#define PIGEON_MESSAGES_G_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>



// Generated class from Pigeon.

class FlutterError {
 public:
  explicit FlutterError(const std::string& code)
    : code_(code) {}
  explicit FlutterError(const std::string& code, const std::string& message)
    : code_(code), message_(message) {}
  explicit FlutterError(const std::string& code, const std::string& message, const flutter::EncodableValue& details)
    : code_(code), message_(message), details_(details) {}

  const std::string& code() const { return code_; }
  const std::string& message() const { return message_; }
  const flutter::EncodableValue& details() const { return details_; }

 private:
  std::string code_;
  std::string message_;
  flutter::EncodableValue details_;
};

template<class T> class ErrorOr {
 public:
  ErrorOr(const T& rhs) : v_(rhs) {}
  ErrorOr(const T&& rhs) : v_(std::move(rhs)) {}
  ErrorOr(const FlutterError& rhs) : v_(rhs) {}
  ErrorOr(const FlutterError&& rhs) : v_(std::move(rhs)) {}

  bool has_error() const { return std::holds_alternative<FlutterError>(v_); }
  const T& value() const { return std::get<T>(v_); };
  const FlutterError& error() const { return std::get<FlutterError>(v_); };

 private:
  friend class MessagingApi;
  friend class FlutterMessagingApi;
  ErrorOr() = default;
  T TakeValue() && { return std::get<T>(std::move(v_)); }

  std::variant<T, FlutterError> v_;
};


// Generated class from Pigeon that represents data sent in messages.
class MessageDto {
 public:
  // Constructs an object setting all fields.
  explicit MessageDto(
    const std::string& id,
    const std::string& name,
    const std::string& message,
    const std::string& created_at);

  const std::string& id() const;
  void set_id(std::string_view value_arg);

  const std::string& name() const;
  void set_name(std::string_view value_arg);

  const std::string& message() const;
  void set_message(std::string_view value_arg);

  const std::string& created_at() const;
  void set_created_at(std::string_view value_arg);


 private:
  static MessageDto FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class MessagingApi;
  friend class MessagingApiCodecSerializer;
  friend class FlutterMessagingApi;
  friend class FlutterMessagingApiCodecSerializer;
  std::string id_;
  std::string name_;
  std::string message_;
  std::string created_at_;

};

class MessagingApiCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  MessagingApiCodecSerializer();
  inline static MessagingApiCodecSerializer& GetInstance() {
    static MessagingApiCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(
    uint8_t type,
    flutter::ByteStreamReader* stream) const override;

};

// MessagingApi
//
// Generated interface from Pigeon that represents a handler of messages from Flutter.
class MessagingApi {
 public:
  MessagingApi(const MessagingApi&) = delete;
  MessagingApi& operator=(const MessagingApi&) = delete;
  virtual ~MessagingApi() {}
  virtual ErrorOr<flutter::EncodableList> GetMessages() = 0;
  virtual ErrorOr<MessageDto> SendMessage(const MessageDto& message) = 0;

  // The codec used by MessagingApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `MessagingApi` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    MessagingApi* api);
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    MessagingApi* api,
    const std::string& message_channel_suffix);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);

 protected:
  MessagingApi() = default;

};
class FlutterMessagingApiCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  FlutterMessagingApiCodecSerializer();
  inline static FlutterMessagingApiCodecSerializer& GetInstance() {
    static FlutterMessagingApiCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(
    uint8_t type,
    flutter::ByteStreamReader* stream) const override;

};

// Generated class from Pigeon that represents Flutter messages that can be called from C++.
class FlutterMessagingApi {
 public:
  FlutterMessagingApi(flutter::BinaryMessenger* binary_messenger);
  FlutterMessagingApi(
    flutter::BinaryMessenger* binary_messenger,
    const std::string& message_channel_suffix);
  static const flutter::StandardMessageCodec& GetCodec();
  void GetMessages(
    std::function<void(const flutter::EncodableList&)>&& on_success,
    std::function<void(const FlutterError&)>&& on_error);
  void SendMessage(
    const MessageDto& message,
    std::function<void(const MessageDto&)>&& on_success,
    std::function<void(const FlutterError&)>&& on_error);

 private:
  flutter::BinaryMessenger* binary_messenger_;
  std::string message_channel_suffix_;
};

#endif  // PIGEON_MESSAGES_G_H_
