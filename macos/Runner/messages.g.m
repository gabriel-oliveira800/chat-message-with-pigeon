// Autogenerated from Pigeon (v18.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "messages.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static FlutterError *createConnectionError(NSString *channelName) {
  return [FlutterError errorWithCode:@"channel-error" message:[NSString stringWithFormat:@"%@/%@/%@", @"Unable to establish connection on channel: '", channelName, @"'."] details:@""];
}

static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface MessageDto ()
+ (MessageDto *)fromList:(NSArray *)list;
+ (nullable MessageDto *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation MessageDto
+ (instancetype)makeWithId:(NSString *)id
    name:(NSString *)name
    message:(NSString *)message
    createdAt:(NSString *)createdAt {
  MessageDto* pigeonResult = [[MessageDto alloc] init];
  pigeonResult.id = id;
  pigeonResult.name = name;
  pigeonResult.message = message;
  pigeonResult.createdAt = createdAt;
  return pigeonResult;
}
+ (MessageDto *)fromList:(NSArray *)list {
  MessageDto *pigeonResult = [[MessageDto alloc] init];
  pigeonResult.id = GetNullableObjectAtIndex(list, 0);
  pigeonResult.name = GetNullableObjectAtIndex(list, 1);
  pigeonResult.message = GetNullableObjectAtIndex(list, 2);
  pigeonResult.createdAt = GetNullableObjectAtIndex(list, 3);
  return pigeonResult;
}
+ (nullable MessageDto *)nullableFromList:(NSArray *)list {
  return (list) ? [MessageDto fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.id ?: [NSNull null],
    self.name ?: [NSNull null],
    self.message ?: [NSNull null],
    self.createdAt ?: [NSNull null],
  ];
}
@end

@interface MessagingApiCodecReader : FlutterStandardReader
@end
@implementation MessagingApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [MessageDto fromList:[self readValue]];
    case 129: 
      return [MessageDto fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface MessagingApiCodecWriter : FlutterStandardWriter
@end
@implementation MessagingApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[MessageDto class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[MessageDto class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface MessagingApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation MessagingApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[MessagingApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[MessagingApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *MessagingApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    MessagingApiCodecReaderWriter *readerWriter = [[MessagingApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpMessagingApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<MessagingApi> *api) {
  SetUpMessagingApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpMessagingApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<MessagingApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.messages.MessagingApi.getMessages", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:MessagingApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMessagesWithError:)], @"MessagingApi api (%@) doesn't respond to @selector(getMessagesWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSArray<MessageDto *> *output = [api getMessagesWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.messages.MessagingApi.sendMessage", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:MessagingApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendMessageMessage:error:)], @"MessagingApi api (%@) doesn't respond to @selector(sendMessageMessage:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        MessageDto *arg_message = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        MessageDto *output = [api sendMessageMessage:arg_message error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FlutterMessagingApiCodecReader : FlutterStandardReader
@end
@implementation FlutterMessagingApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [MessageDto fromList:[self readValue]];
    case 129: 
      return [MessageDto fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FlutterMessagingApiCodecWriter : FlutterStandardWriter
@end
@implementation FlutterMessagingApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[MessageDto class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[MessageDto class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FlutterMessagingApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FlutterMessagingApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FlutterMessagingApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FlutterMessagingApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FlutterMessagingApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FlutterMessagingApiCodecReaderWriter *readerWriter = [[FlutterMessagingApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

@interface FlutterMessagingApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@property(nonatomic, strong) NSString *messageChannelSuffix;
@end

@implementation FlutterMessagingApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  return [self initWithBinaryMessenger:binaryMessenger messageChannelSuffix:@""];
}
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger messageChannelSuffix:(nullable NSString*)messageChannelSuffix{
  self = [self init];
  if (self) {
    _binaryMessenger = binaryMessenger;
    _messageChannelSuffix = [messageChannelSuffix length] == 0 ? @"" : [NSString stringWithFormat: @".%@", messageChannelSuffix];
  }
  return self;
}
- (void)getMessagesWithCompletion:(void (^)(NSArray<MessageDto *> *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.messages.FlutterMessagingApi.getMessages", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:FlutterMessagingApiGetCodec()];
  [channel sendMessage:nil reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion(nil, [FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        NSArray<MessageDto *> *output = reply[0] == [NSNull null] ? nil : reply[0];
        completion(output, nil);
      }
    } else {
      completion(nil, createConnectionError(channelName));
    } 
  }];
}
- (void)sendMessageMessage:(MessageDto *)arg_message completion:(void (^)(MessageDto *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.messages.FlutterMessagingApi.sendMessage", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:FlutterMessagingApiGetCodec()];
  [channel sendMessage:@[arg_message ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion(nil, [FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        MessageDto *output = reply[0] == [NSNull null] ? nil : reply[0];
        completion(output, nil);
      }
    } else {
      completion(nil, createConnectionError(channelName));
    } 
  }];
}
@end

